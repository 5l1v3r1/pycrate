# -*- coding: UTF-8 -*-
#/**
# * Software Name : pycrate
# * Version : 0.1
# *
# * Copyright Â© 2017. Benoit Michau. ANSSI.
# *
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * 
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * 
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# * 02110-1301, USA.
# *
# *--------------------------------------------------------
# * File Name : pycrate_csndir/msracap.py
# * Created : 2017-06-15
# * Authors : Benoit Michau 
# *--------------------------------------------------------
#*/

# MS Radio Access capability
# TS 24.008, 10.5.5.12a

_AccessTechnoType_dict = {
    0 : 'GSM P',
    1 : 'GSM E  --note that GSM E covers GSM P',
    2 : 'GSM R  --note that GSM R covers GSM E and GSM P',
    3 : 'GSM 1800',
    4 : 'GSM 1900',
    5 : 'GSM 450',
    6 : 'GSM 480',
    7 : 'GSM 850',
    8 : 'GSM 750',
    9 : 'GSM T 380',
    10 : 'GSM T 410',
    11 : 'unused',
    12 : 'GSM 710',
    13 : 'GSM T 810',
    }

# code automatically generated by pycrate_csn1
# change object type with type=T_BYTES
# add dict for value interpretation with dict={...}

from pycrate_csn1.csnobj import *

spare_bit = CSN1Bit(name='spare_bit')
Spare_bit = spare_bit
Spare_Bit = spare_bit
spare_bits = CSN1Bit(name='spare_bits', num=-1)
Spare_bits = spare_bits
Spare_Bits = spare_bits

Enhanced_Flexible_Timeslot_Assignment_struct = CSN1Alt(name='Enhanced_Flexible_Timeslot_Assignment_struct', root=True, alt={
  '0': ('', []),
  '1': ('', [
  CSN1Bit(name='Alternative_EFTA_Multislot_Class', bit=4),
  CSN1Bit(name='EFTA_Multislot_Capability_Reduction_for_Downlink_Dual_Carrier', bit=3)])})

DLMC_Capability_struct = CSN1List(name='DLMC_Capability_struct', root=True, list=[
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='DLMC_Non_contiguous_intra_band_reception', bit=2),
    CSN1Bit(name='DLMC_Inter_band_reception')])}),
  CSN1Bit(name='DLMC_Maximum_Bandwidth', bit=2),
  CSN1Bit(name='DLMC_Maximum_Number_of_Downlink_Timeslots', bit=6),
  CSN1Bit(name='DLMC_Maximum_Number_of_Downlink_Carriers', bit=3)])

Additional_access_technologies_struct = CSN1List(name='Additional_access_technologies_struct', root=True, list=[
  CSN1Bit(name='Access_Technology_Type', bit=4),
  CSN1Bit(name='GMSK_Power_Class', bit=3),
  CSN1Bit(name='_8PSK_Power_Class', bit=2)])

Multislot_capability_struct = CSN1List(name='Multislot_capability_struct', root=True, list=[
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='HSCSD_multislot_class', bit=5)])}),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='GPRS_multislot_class', bit=5),
    CSN1Bit(name='GPRS_Extended_Dynamic_Allocation_Capability')])}),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='SMS_VALUE', bit=4),
    CSN1Bit(name='SM_VALUE', bit=4)])}),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='ECSD_multislot_class', bit=5)])}),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='EGPRS_multislot_class', bit=5),
    CSN1Bit(name='EGPRS_Extended_Dynamic_Allocation_Capability')])}),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='DTM_GPRS_Multi_Slot_Class', bit=2),
    CSN1Bit(name='Single_Slot_DTM'),
    CSN1Alt(alt={
      '0': ('', []),
      '1': ('', [
      CSN1Bit(name='DTM_EGPRS_Multi_Slot_Class', bit=2)])})])})])

A5_bits = CSN1List(name='A5_bits', root=True, list=[
  CSN1Bit(name='A5_1'),
  CSN1Bit(name='A5_2'),
  CSN1Bit(name='A5_3'),
  CSN1Bit(name='A5_4'),
  CSN1Bit(name='A5_5'),
  CSN1Bit(name='A5_6'),
  CSN1Bit(name='A5_7')])

Content = CSN1List(name='Content', root=True, list=[
  CSN1Bit(name='RF_Power_Capability', bit=3),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Ref(obj=A5_bits)])}),
  CSN1Bit(name='ES_IND'),
  CSN1Bit(name='PS'),
  CSN1Bit(name='VGCS'),
  CSN1Bit(name='VBS'),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Ref(obj=Multislot_capability_struct)])}),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='_8PSK_Power_Capability', bit=2)])}),
  CSN1Bit(name='COMPACT_Interference_Measurement_Capability'),
  CSN1Bit(name='Revision_Level_Indicator'),
  CSN1Bit(name='UMTS_FDD_Radio_Access_Technology_Capability'),
  CSN1Bit(name='UMTS_3_84_Mcps_TDD_Radio_Access_Technology_Capability'),
  CSN1Bit(name='CDMA_2000_Radio_Access_Technology_Capability'),
  CSN1Bit(name='UMTS_1_28_Mcps_TDD_Radio_Access_Technology_Capability'),
  CSN1Bit(name='GERAN_Feature_Package_1'),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='Extended_DTM_GPRS_Multi_Slot_Class', bit=2),
    CSN1Bit(name='Extended_DTM_EGPRS_Multi_Slot_Class', bit=2)])}),
  CSN1Bit(name='Modulation_based_multislot_class_support'),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='High_Multislot_Capability', bit=2)])}),
  CSN1Val(name='', val='0'),
  CSN1Bit(name='GMSK_Multislot_Power_Profile', bit=2),
  CSN1Bit(name='_8_PSK_Multislot_Power_Profile', bit=2),
  CSN1Bit(name='Multiple_TBF_Capability'),
  CSN1Bit(name='Downlink_Advanced_Receiver_Performance', bit=2),
  CSN1Bit(name='Extended_RLC_MAC_Control_Message_Segmentation_Capability'),
  CSN1Bit(name='DTM_Enhancements_Capability'),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='DTM_GPRS_High_Multi_Slot_Class', bit=3),
    CSN1Alt(alt={
      '0': ('', []),
      '1': ('', [
      CSN1Bit(name='DTM_EGPRS_High_Multi_Slot_Class', bit=3)])})])}),
  CSN1Bit(name='PS_Handover_Capability'),
  CSN1Bit(name='DTM_Handover_Capability'),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='Multislot_Capability_Reduction_for_Downlink_Dual_Carrier', bit=3),
    CSN1Bit(name='Downlink_Dual_Carrier_for_DTM_Capability')])}),
  CSN1Bit(name='Flexible_Timeslot_Assignment'),
  CSN1Bit(name='GAN_PS_Handover_Capability'),
  CSN1Bit(name='RLC_Non_persistent_Mode'),
  CSN1Bit(name='Reduced_Latency_Capability'),
  CSN1Bit(name='Uplink_EGPRS2', bit=2),
  CSN1Bit(name='Downlink_EGPRS2', bit=2),
  CSN1Bit(name='E_UTRA_FDD_support'),
  CSN1Bit(name='E_UTRA_TDD_support'),
  CSN1Bit(name='GERAN_to_E_UTRA_support_in_GERAN_packet_transfer_mode', bit=2),
  CSN1Bit(name='Priority_based_reselection_support'),
  CSN1Ref(obj=Enhanced_Flexible_Timeslot_Assignment_struct),
  CSN1Bit(name='Indication_of_Upper_Layer_PDU_Start_Capability_for_RLC_UM'),
  CSN1Bit(name='EMST_Capability'),
  CSN1Bit(name='MTTI_Capability'),
  CSN1Bit(name='UTRA_CSG_Cells_Reporting'),
  CSN1Bit(name='E_UTRA_CSG_Cells_Reporting'),
  CSN1Bit(name='DTR_Capability'),
  CSN1Bit(name='EMSR_Capability'),
  CSN1Bit(name='Fast_Downlink_Frequency_Switching_Capability'),
  CSN1Bit(name='TIGHTER_Capability', bit=2),
  CSN1Bit(name='FANR_Capability'),
  CSN1Bit(name='IPA_Capability'),
  CSN1Bit(name='GERAN_Network_Sharing_support'),
  CSN1Bit(name='E_UTRA_Wideband_RSRQ_measurements_support'),
  CSN1Bit(name='UTRA_Multiple_Frequency_Band_Indicators_support'),
  CSN1Bit(name='E_UTRA_Multiple_Frequency_Band_Indicators_support'),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Ref(obj=DLMC_Capability_struct)])}),
  CSN1Bit(name='Extended_TSC_Set_Capability_support'),
  CSN1Bit(name='Extended_EARFCN_value_range'),
  CSN1Bit(name='PCH_EC_PCH_monitoring_support', bit=2)])

Access_capabilities_struct = CSN1List(name='Access_capabilities_struct', root=True, list=[
  CSN1Bit(name='Length', bit=7),
  CSN1List(lref=-1, list=[
    CSN1Ref(obj=Content),
    CSN1Ref(obj=spare_bits, num=-1)])])

MS_RA_capability_value_part_struct = CSN1List(name='MS_RA_capability_value_part_struct', root=True, list=[
  CSN1Alt(klen=4, kdic=_AccessTechnoType_dict, alt={
    '0000': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '0001': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '0010': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '0011': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '0100': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '0101': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '0110': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '0111': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1000': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1001': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1010': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1011': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1100': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1101': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1110': ('Access_Technology_Type', [
    CSN1Ref(obj=Access_capabilities_struct)]),
    '1111': ('Access_Technology_Type', [
    CSN1Bit(name='Length', bit=7),
    CSN1List(lref=-1, list=[
      CSN1List(num=-1, list=[
        CSN1Val(name='', val='1'),
        CSN1Ref(obj=Additional_access_technologies_struct)]),
      CSN1Val(name='', val='0'),
      CSN1Ref(obj=spare_bits, num=-1)])])}),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1SelfRef()])})])

MS_RA_capability_value_part = CSN1List(name='MS_RA_capability_value_part', root=True, list=[
  CSN1Ref(obj=MS_RA_capability_value_part_struct),
  CSN1Ref(obj=spare_bits, num=-1)])

